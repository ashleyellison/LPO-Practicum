--------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /Users/doylewr/practicum/lpo_prac_2016-2017/central/lessons/simulation/si
> mulation.log
  log type:  text
 opened on:  31 Jan 2017, 16:30:39

. 
. /* PhD Practicum, Spring 2017 */
. /* Getting Started with */
. /* Will Doyle*/
. /* 1/31/17 */
. /* Saved on Blackboard */
. 
.  /*Graph type postscript */
. // local gtype ps
. 
. /* Graph type: pdf */
. //local gtype pdf
. 
. /* Graph type: eps */
. local gtype eps

. 
. clear 

. 
. // TOC
. 
. //1: Run CLT example
. local xbar_example=0

. 
. //2: Run basic regression example
. local reg_example_1=0

. 
. //2a: 
. 
. local inclass_1=0

. 
. //3: Run multiple regression example
. local reg_example_2=0

. 
. //3a:
. 
. local inclass_2=1

. 
. // Create a hypothetical situation
. 
. local mymean 5

. local mysd 1

. local pop_size 10000

. local sample_size 100

. local nreps 1000

. 
. // Create variable x based on values above
. drawnorm x, means(`mymean') sds(`mysd') n(`pop_size')
(obs 10000)

. 
. save x, replace
file x.dta saved

. 
. // Population mean
. mean x

Mean estimation                     Number of obs    =   10000

--------------------------------------------------------------
             |       Mean   Std. Err.     [95% Conf. Interval]
-------------+------------------------------------------------
           x |   5.006494   .0099925      4.986907    5.026082
--------------------------------------------------------------

. 
. scalar pop_mean=_b[x]

. 
. // Popoluation standard deviation
. tabstat x, stat(sd) save

    variable |        sd
-------------+----------
           x |  .9992521
------------------------

. 
. mat M=r(StatTotal)

. 
. scalar pop_sd=M[1,1]

. 
. preserve // Set return state

. sample `sample_size', count // Take a sample 
(9900 observations deleted)

. mean x // Calculate mean 

Mean estimation                     Number of obs    =     100

--------------------------------------------------------------
             |       Mean   Std. Err.     [95% Conf. Interval]
-------------+------------------------------------------------
           x |   4.999038   .0919703      4.816549    5.181527
--------------------------------------------------------------

. tabstat x, stat(sd) // Calculate sds

    variable |        sd
-------------+----------
           x |  .9197032
------------------------

. restore //

. 
. 
. // Is CLT a real thing?
. 
. if `xbar_example'==1{
. // create a place in memory called buffer which will store a variable called xbar in
>  a file called means.dta
. postfile buffer xbar sd using means, replace 
. 
. forvalues i=1/`nreps'{
  2.         preserve // Set return state
  3.         quietly sample `sample_size', count // Keep only certain observations
  4.         quietly mean x // get mean
  5.         quietly tabstat x, stat(sd) save //standard deviation
  6.         mat M=r(StatTotal)
  7.         scalar sample_sd=M[1,1]
  8.         post buffer (_b[x]) (sample_sd) // post the estimate to the buffer
  9.         restore // Go back to full dataset
 10. }
. 
. postclose buffer // Buffer can stop recording
. 
. use means, clear
. 
. kdensity xbar,xline (`mymean')
. 
. graph export clt.`gtype', replace
. 
. kdensity sd,xline (`mysd')
. 
. mean xbar
. 
. scalar simulate_mean=_b[xbar]
. 
. //Here's whate SE should be:
. scalar hypo_se=`mysd'/sqrt(`sample_size')
. 
. //Here's what SE is: 
. tabstat xbar,stat(sd) save
. 
. mat M=r(StatTotal)
. 
. scalar simulate_se=M[1,1]
. 
. // Mean of repeated sample standard deviations
. mean sd
. 
. }

. 
.  
. 
. // Regression simulation: first example
. 
. use x, clear

. 
. // Generate error term
. local error_sd 10

. 
. drawnorm e, means(0) sds(`error_sd')

. 
. // Set values for parameters
. local beta_0=10

. 
. local beta_1=2

. 
. // Generate outcome
. gen y=`beta_0'+(`beta_1'*x)+e

. 
. // Run MC study for basic regression
. if `reg_example_1'==1{
. // create a place in memory called buffer which will store a variable called xbar in
>  a file called means.dta
. postfile buffer beta_0 beta_1 using reg_1, replace 
. 
. forvalues i=1/`nreps'{
  2.         preserve // Set return state
  3.         quietly sample `sample_size', count // Keep only certain observations
  4.         quietly reg y  x // get parameter estimates
  5.         post buffer (_b[_cons]) (_b[x]) // post the estimate to the buffer
  6.         restore // Go back to full dataset
  7. }
. 
. postclose buffer // Buffer can stop recording
. 
. // Open up results of MC study for basic regression
. use reg_1, clear
. 
. kdensity beta_0, xline(`beta_0')
. 
. graph export beta_0.`gtype', replace
. 
. kdensity beta_1, xline(`beta_1')
. 
. graph export beta_1.`gtype', replace
. 
. mean beta_0
. 
. mean beta_1
. 
. }

. 
. 
. if `inclass_1'==1{
. // In class Exercise 1
. 
. clear
. 
. set obs 10000
. 
. gen x=runiform() // Uniform from 0 to 1
. 
. // Generate error term
. 
. local a -10
. 
. local b 10
. 
. gen e=((`b'-`a')*runiform())+`a'
. 
. mean e
. 
. // Set values for parameters
. local beta_0=10
. 
. local beta_1=2
. 
. // Generate outcome
. gen y=`beta_0'+(`beta_1'*x)+e
. 
. kdensity y
.  
. // create a place in memory called buffer which will store a variable called xbar in
>  a file called means.dta
. postfile buffer beta_0 beta_1 using reg_1a, replace 
. 
. forvalues i=1/`nreps'{
  2.         preserve // Set return state
  3.         quietly sample `sample_size', count // Keep only certain observations
  4.         quietly reg y  x // get parameter estimates
  5.         post buffer (_b[_cons]) (_b[x]) // post the estimate to the buffer
  6.         restore // Go back to full dataset
  7. }
. 
. postclose buffer // Buffer can stop recording
. 
. // Open up results of MC study for basic regression
. use reg_1a, clear
. 
. kdensity beta_0, xline(`beta_0')
. 
. graph export beta_0.`gtype', replace
. 
. kdensity beta_1, xline(`beta_1')
. 
. graph export beta_1.`gtype', replace
. 
. mean beta_0
. 
. mean beta_1
. 
. }

. 
.  
. // Multiple regression example
. clear

. 
. local my_corr=.02

. 
. local my_means 10 20 

. 
. local my_sds 5 10

. 
. // Create variable x based on values above
. drawnorm x1 x2, means(`my_means') sds(`my sds') corr(1,`my_corr'\`my_corr',1) n(`pop
> _size') cstorage(lower)
(obs 10000)

. 
. drawnorm e, mean(0) sd(`error_sd')

. 
. local beta_0=10

. 
. local beta_1=2

. 
. local beta_2=4

. 
. // Actual World
. 
. gen y= `beta_0'+ (`beta_1'*x1) + (`beta_2'*x2 ) + e

. 
. if `reg_example_2'==1{
. // create a place in memory called buffer which will store a variable called xbar in
>  a file called means.dta
. postfile buffer beta_0 beta_1 using reg_2, replace 
. 
. forvalues i=1/`nreps'{
  2.         preserve // Set return state
  3.         quietly sample `sample_size', count // Keep only certain observations
  4.         //Available data
.         quietly reg y  x1  // get parameter estimates
  5.         post buffer (_b[_cons]) (_b[x]) // post the estimate to the buffer
  6.         restore // Go back to full dataset
  7. }
. 
. postclose buffer // Buffer can stop recording
. 
. use reg_2, clear
. 
. kdensity beta_1, xline(`beta_1')
. 
. graph export ovb.`gtype', replace
. }

. 
. local inclass_2=1

. 
. if `inclass_2'==1{
. // Multiple regression example
. 
. postfile buffer2 mean_beta_1 using multiple_corrs, replace
postfile buffer2 already exists
r(110);
. 
. local my_means 10 20 
. 
. local my_sds 5 10
. 
. foreach my_corr of numlist .05(.05).95{
  2. 
. clear
  3. 
. // Create variable x based on values above
. drawnorm x1 x2, means(`my_means') sds(`my sds') corr(1,`my_corr'\`my_corr',1) n(`pop
> _size') cstorage(lower)
  4. 
. drawnorm e, mean(0) sd(`error_sd')
  5. 
. local beta_0=10
  6. 
. local beta_1=2
  7. 
. local beta_2=4
  8. 
. // Actual World
. 
. gen y= `beta_0'+ (`beta_1'*x1) + (`beta_2'*x2 ) + e
  9. 
. // create a place in memory called buffer which will store a variable called xbar in
>  a file called means.dta
. postfile buffer beta_0 beta_1 using reg_2, replace 
 10. 
. forvalues i=1/`nreps'{
 11.         preserve // Set return state
 12.         quietly sample `sample_size', count // Keep only certain observations
 13.         //Available data
.         quietly reg y  x1  // get parameter estimates
 14.         post buffer (_b[_cons]) (_b[x]) // post the estimate to the buffer
 15.         restore // Go back to full dataset
 16. }
 17. 
. postclose buffer // Buffer can stop recording
 18. 
. use reg_2, clear
 19. 
. //Calculate
. 
. di "Results for correlation= `my_corr'"
 20. 
. mean beta_1
 21. 
. post buffer2 (_b[beta_1])
 22. 
. }
. 
. }
r(110);

end of do-file

r(110);

. postclose buffer2

. use multiple_corrs, clear

. browse

. exit
